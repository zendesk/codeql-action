# Warning: This file is generated automatically, and should not be modified.
# Instead, please modify the template in the pr-checks directory and run:
#     (cd pr-checks; pip install ruamel.yaml@0.17.31 && python3 sync.py)
# to regenerate this file.

name: PR Check - Diagnostic export
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GO111MODULE: auto
on:
  push:
    branches:
      - main
      - releases/v*
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch: {}
jobs:
  diagnostics-export:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            version: linked
          - os: macos-latest
            version: linked
          - os: windows-latest
            version: linked
          - os: ubuntu-latest
            version: nightly-latest
          - os: macos-latest
            version: nightly-latest
          - os: windows-latest
            version: nightly-latest
    name: Diagnostic export
    permissions:
      contents: read
      security-events: write
    timeout-minutes: 45
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup Python on MacOS
        uses: actions/setup-python@v5
        if: runner.os == 'macOS' && matrix.version == 'stable-v2.14.6'
        with:
          python-version: '3.11'
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Prepare test
        id: prepare-test
        uses: ./.github/actions/prepare-test
        with:
          version: ${{ matrix.version }}
          use-all-platform-bundle: 'false'
          setup-kotlin: 'true'
      - uses: ./../action/init
        id: init
        with:
          languages: javascript
          tools: ${{ steps.prepare-test.outputs.tools-url }}
      - name: Add test diagnostics
        shell: bash
        env:
          CODEQL_PATH: ${{ steps.init.outputs.codeql-path }}
        run: |
          "$CODEQL_PATH" database add-diagnostic \
            "$RUNNER_TEMP/codeql_databases/javascript" \
            --file-path /path/to/file \
            --plaintext-message "Plaintext message" \
            --source-id "lang/diagnostics/example" \
            --source-name "Diagnostic name" \
            --ready-for-status-page
      - uses: ./../action/analyze
        with:
          output: ${{ runner.temp }}/results
          upload-database: false
      - name: Upload SARIF
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-export-${{ matrix.os }}-${{ matrix.version }}.sarif.json
          path: ${{ runner.temp }}/results/javascript.sarif
          retention-days: 7
      - name: Check diagnostics appear in SARIF
        uses: actions/github-script@v7
        env:
          SARIF_PATH: ${{ runner.temp }}/results/javascript.sarif
        with:
          script: |
            const fs = require('fs');

            function checkStatusPageNotification(n) {
              const expectedMessage = 'Plaintext message';
              if (n.message.text !== expectedMessage) {
                core.setFailed(`Expected the status page diagnostic to have the message '${expectedMessage}', but found '${n.message.text}'.`);
              }
              if (n.locations.length !== 1) {
                core.setFailed(`Expected the status page diagnostic to have exactly 1 location, but found ${n.locations.length}.`);
              }
            }

            const sarif = JSON.parse(fs.readFileSync(process.env['SARIF_PATH'], 'utf8'));
            const run = sarif.runs[0];

            const toolExecutionNotifications = run.invocations[0].toolExecutionNotifications;
            const statusPageNotifications = toolExecutionNotifications.filter(n =>
              n.descriptor.id === 'lang/diagnostics/example' && n.properties?.visibility?.statusPage
            );
            if (statusPageNotifications.length !== 1) {
              core.setFailed(
                'Expected exactly one status page reporting descriptor for this diagnostic in the ' +
                  `'runs[].invocations[].toolExecutionNotifications[]' SARIF property, but found ` +
                  `${statusPageNotifications.length}. All notification reporting descriptors: ` +
                  `${JSON.stringify(toolExecutionNotifications)}.`
              );
            }
            checkStatusPageNotification(statusPageNotifications[0]);

            const notifications = run.tool.driver.notifications;
            const diagnosticNotification = notifications.filter(n =>
              n.id === 'lang/diagnostics/example' && n.name === 'lang/diagnostics/example' &&
                n.fullDescription.text === 'Diagnostic name'
            );
            if (diagnosticNotification.length !== 1) {
              core.setFailed(
                'Expected exactly one notification for this diagnostic in the ' +
                  `'runs[].tool.driver.notifications[]' SARIF property, but found ` +
                  `${diagnosticNotification.length}. All notifications: ` +
                  `${JSON.stringify(notifications)}.`
              );
            }

            core.info('Finished diagnostic export test');
    env:
      CODEQL_ACTION_EXPORT_DIAGNOSTICS: true
      CODEQL_ACTION_TEST_MODE: true
